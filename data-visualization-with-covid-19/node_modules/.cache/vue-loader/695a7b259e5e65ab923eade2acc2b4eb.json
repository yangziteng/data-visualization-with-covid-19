{"remainingRequest":"C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\src\\views\\main-world-layout.vue?vue&type=template&id=2a3f1a2f&","dependencies":[{"path":"C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\src\\views\\main-world-layout.vue","mtime":1674393276348},{"path":"C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678158406718},{"path":"C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1678158410766},{"path":"C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678158406718},{"path":"C:\\Users\\86158\\Desktop\\12-23疫情数据分析一月中旬\\covid19\\data-visualization-with-covid-19\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1678158409891}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}